// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillConnect.Data;

#nullable disable

namespace SkillConnect.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408184350_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SkillConnect.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CreatedAtUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContactEmail")
                        .IsUnique();

                    b.HasIndex("ContactPhone")
                        .IsUnique();

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SkillConnect.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameTelugu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visakhapatnam",
                            NameTelugu = "విశాఖపట్నం",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vijayawada",
                            NameTelugu = "విజయవాడ",
                            StateId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hyderabad",
                            NameTelugu = "హైదరాబాద్",
                            StateId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Warangal",
                            NameTelugu = "వారంగల్",
                            StateId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Chennai",
                            NameTelugu = "చెన్నై",
                            StateId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Coimbatore",
                            NameTelugu = "కోయంబత్తూరు",
                            StateId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bengaluru",
                            NameTelugu = "బెంగుళూరు",
                            StateId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mysuru",
                            NameTelugu = "మైసూరు",
                            StateId = 4
                        });
                });

            modelBuilder.Entity("SkillConnect.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApplicantEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ApplicantPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("AppliedAtUnix")
                        .HasColumnType("bigint");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId", "JobPostId")
                        .IsUnique();

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("SkillConnect.Models.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AccommodationProvided")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdditionalBenefits")
                        .HasColumnType("longtext");

                    b.Property<long>("ApplicationDeadlineUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationProcess")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ApprenticesConsidered")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<long>("CreatedAtUnix")
                        .HasColumnType("bigint");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ExperienceMax")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceMin")
                        .HasColumnType("int");

                    b.Property<string>("FacilitiesProvided")
                        .HasColumnType("longtext");

                    b.Property<string>("GenderRequirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<long?>("ModifiedAtUnix")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalaryMax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SalaryMin")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("Urgent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Vacancies")
                        .HasColumnType("int");

                    b.Property<int>("WorkingHoursMax")
                        .HasColumnType("int");

                    b.Property<int>("WorkingHoursMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("SkillConnect.Models.JobPostTrade", b =>
                {
                    b.Property<Guid>("JobPostId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.HasKey("JobPostId", "TradeId");

                    b.HasIndex("TradeId");

                    b.ToTable("JobPostTrade");
                });

            modelBuilder.Entity("SkillConnect.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameTelugu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Andhra Pradesh",
                            NameTelugu = "ఆంధ్రప్రదేశ్"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Telangana",
                            NameTelugu = "తెలంగాణ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tamil Nadu",
                            NameTelugu = "తమిళనాడు"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Karnataka",
                            NameTelugu = "కర్ణాటక"
                        });
                });

            modelBuilder.Entity("SkillConnect.Models.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TradeId"));

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TradeNameTelugu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TradeId");

                    b.ToTable("Trade");

                    b.HasData(
                        new
                        {
                            TradeId = 1,
                            TradeName = "Electrician",
                            TradeNameTelugu = "ఎలక్ట్రీషియన్"
                        },
                        new
                        {
                            TradeId = 2,
                            TradeName = "Fitter",
                            TradeNameTelugu = "ఫిట్టర్"
                        },
                        new
                        {
                            TradeId = 3,
                            TradeName = "Welder",
                            TradeNameTelugu = "వెల్డర్"
                        },
                        new
                        {
                            TradeId = 4,
                            TradeName = "Turner",
                            TradeNameTelugu = "టర్నర్"
                        },
                        new
                        {
                            TradeId = 5,
                            TradeName = "Machinist",
                            TradeNameTelugu = "మెషినిస్ట్"
                        },
                        new
                        {
                            TradeId = 6,
                            TradeName = "Plumber",
                            TradeNameTelugu = "ప్లంబర్"
                        },
                        new
                        {
                            TradeId = 7,
                            TradeName = "Refrigeration & Air Conditioning",
                            TradeNameTelugu = "ఎయిర్ కండిషనింగ్ మరియు రిఫ్రిజరేషన్"
                        },
                        new
                        {
                            TradeId = 8,
                            TradeName = "Mechanic Diesel",
                            TradeNameTelugu = "మెకానిక్ డీజిల్"
                        },
                        new
                        {
                            TradeId = 9,
                            TradeName = "Mechanic Motor Vehicle",
                            TradeNameTelugu = "మెకానిక్ మోటార్ వాహనం"
                        },
                        new
                        {
                            TradeId = 10,
                            TradeName = "Computer Operator and Programming Assistant (COPA)",
                            TradeNameTelugu = "కంప్యూటర్ ఆపరేటర్ మరియు ప్రోగ్రామింగ్ అసిస్టెంట్"
                        });
                });

            modelBuilder.Entity("SkillConnect.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("DateOfBirth")
                        .HasColumnType("bigint");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Experience")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ITIName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mandal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OtherTrade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PassYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RegistrationDate")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalaryExpectation")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("TradeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SkillConnect.Models.Company", b =>
                {
                    b.HasOne("SkillConnect.Models.District", "District")
                        .WithMany("Companies")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.State", "State")
                        .WithMany("Companies")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SkillConnect.Models.District", b =>
                {
                    b.HasOne("SkillConnect.Models.State", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("SkillConnect.Models.JobApplication", b =>
                {
                    b.HasOne("SkillConnect.Models.JobPost", "JobPost")
                        .WithMany("Applications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillConnect.Models.JobPost", b =>
                {
                    b.HasOne("SkillConnect.Models.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.User", null)
                        .WithMany("PostedJobs")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("District");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SkillConnect.Models.JobPostTrade", b =>
                {
                    b.HasOne("SkillConnect.Models.JobPost", "JobPost")
                        .WithMany("JobPostTrades")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.Trade", "Trade")
                        .WithMany("JobPostTrades")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("SkillConnect.Models.User", b =>
                {
                    b.HasOne("SkillConnect.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillConnect.Models.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("State");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("SkillConnect.Models.Company", b =>
                {
                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("SkillConnect.Models.District", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("SkillConnect.Models.JobPost", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobPostTrades");
                });

            modelBuilder.Entity("SkillConnect.Models.State", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("SkillConnect.Models.Trade", b =>
                {
                    b.Navigation("JobPostTrades");
                });

            modelBuilder.Entity("SkillConnect.Models.User", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("PostedJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
